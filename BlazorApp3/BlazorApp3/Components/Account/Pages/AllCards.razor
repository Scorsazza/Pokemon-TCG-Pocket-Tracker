@page "/AllCards"
@using BlazorApp3.Data.Models
@using System.Security.Claims
@using BlazorApp3.Services
@inject IPokemonCollectionService CollectionSvc
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS
@rendermode InteractiveServer
@inherits ComponentBase

<PageTitle>⚡ All Pokémon Cards</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">⚡ Browse All Cards</h1>

    <!-- Controls Row -->
    <div class="row mb-4">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="🔍 Search cards..."
                   @bind="searchTerm" @oninput="OnSearchChanged" />
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="sortBy" @bind:after="ApplyFilters">
                <option value="name">Sort by Name</option>
                <option value="pack">Sort by Pack</option>
                <option value="rarity">Sort by Rarity</option>
                <option value="newest">Sort by Newest</option>
            </select>
        </div>
        <div class="col-md-4">
            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                Clear Filters
            </button>
        </div>
    </div>

    <!-- Filters Row -->
    <div class="row mb-4">
        <div class="col-md-4">
            <select class="form-select" @bind="selectedPack" @bind:after="ApplyFilters">
                <option value="">All Packs</option>
                @foreach (var pack in availablePacks)
                {
                    <option value="@pack">@pack</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="selectedRarity" @bind:after="ApplyFilters">
                <option value="">All Rarities</option>
                @foreach (var rarity in availableRarities)
                {
                    <option value="@rarity">@rarity</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="collectionFilter" @bind:after="ApplyFilters">
                <option value="all">All Cards</option>
                <option value="collected">Collected</option>
                <option value="missing">Missing</option>
            </select>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading all cards...</p>
        </div>
    }
    else if (error is not null)
    {
        <div class="alert alert-danger">
            @error
            <button class="btn btn-sm btn-secondary ms-2" @onclick="Load">Retry</button>
        </div>
    }
    else
    {
        <!-- Stats Row -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card bg-light">
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-4">
                                <h5 class="text-primary mb-0">@viewCards.Count</h5>
                                <small class="text-muted">Total Available</small>
                            </div>
                            <div class="col-md-4">
                                <h5 class="text-success mb-0">@viewCards.Count(c => c.IsCollected)</h5>
                                <small class="text-muted">You Own</small>
                            </div>
                            <div class="col-md-4">
                                <h5 class="text-warning mb-0">@filteredCards.Count</h5>
                                <small class="text-muted">Showing</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (!filteredCards.Any())
        {
            <div class="text-center py-5">
                <h4 class="text-muted">No cards found</h4>
                <p class="text-muted">Try adjusting your search or filters</p>
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
                @foreach (var c in filteredCards)
                {
                    <div class="col">
                        <div class="card h-100">
                            <img src="@c.ImageUrl" class="card-img-top" alt="@c.Name"
                                 style="width: 100%; height: auto; object-fit: contain;" />
                            <div class="card-body">
                                <h6 class="card-title">@c.Name</h6>
                                <p class="card-text small">
                                    <strong>Pack:</strong> @c.Pack<br />
                                    <strong>#:</strong> @c.CardNumber<br />
                                    <span class="badge bg-secondary">@c.Rarity</span>
                                </p>
                                <div class="d-grid">
                                    <button class="btn @(c.IsCollected ? "btn-outline-success" : "btn-success") btn-sm"
                                            disabled="@c.IsCollected"
                                            @onclick="() => Add(c.CardId)">
                                        @(c.IsCollected ? "✓ Added" : "Add to Collection")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    private bool isLoading = true;
    private string? error;
    private List<ViewCard> viewCards = new();
    private List<ViewCard> filteredCards = new();

    // Filter and sort properties
    private string searchTerm = "";
    private string sortBy = "name";
    private string selectedPack = "";
    private string selectedRarity = "";
    private string collectionFilter = "all";

    // Available options for filters
    private List<string> availablePacks = new();
    private List<string> availableRarities = new();

    private record ViewCard(
        string CardId,
        string Name,
        string Pack,
        string Rarity,
        string CardNumber,
        string ImageUrl,
        bool IsCollected
    );

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        if (auth.User.Identity?.IsAuthenticated == true)
        {
            await Load();
        }
        else
        {
            // Still load cards even if not authenticated, just don't show collection status
            await Load();
        }
    }

    private async Task Load()
    {
        isLoading = true;
        error = null;

        try
        {
            // 1) load full set
            var all = await CollectionSvc.GetAllCardsAsync();

            // 2) load just what the user owns
            var auth = await AuthState.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var owned = uid is null
                        ? new List<CardCollectionDto>()
                        : await CollectionSvc.GetMyCollectionAsync(uid);

            var ownedIds = owned.Select(o => o.CardId).ToHashSet();

            // 3) build view model
            viewCards = all
                .Select(c => new ViewCard(
                    c.Id, c.Name, c.Pack, c.Rarity, c.CardNumber, c.ImageUrl,
                    IsCollected: ownedIds.Contains(c.Id)
                ))
                .ToList();

            // Populate filter options
            availablePacks = viewCards.Select(c => c.Pack).Distinct().OrderBy(p => p).ToList();
            availableRarities = viewCards.Select(c => c.Rarity).Distinct().OrderBy(r => r).ToList();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Add(string cardId)
    {
        try
        {
            var auth = await AuthState.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

            await CollectionSvc.AddCardAsync(uid,
                new AddCardRequest { CardId = cardId, Quantity = 1 });

            await Load();
            await JS.InvokeVoidAsync("alert", "Card added to your collection!");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error adding card: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        var filtered = viewCards.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(c =>
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Pack.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.CardNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedPack))
        {
            filtered = filtered.Where(c => c.Pack == selectedPack);
        }

        if (!string.IsNullOrEmpty(selectedRarity))
        {
            filtered = filtered.Where(c => c.Rarity == selectedRarity);
        }

        if (collectionFilter == "collected")
        {
            filtered = filtered.Where(c => c.IsCollected);
        }
        else if (collectionFilter == "missing")
        {
            filtered = filtered.Where(c => !c.IsCollected);
        }

        if (sortBy == "name")
        {
            filtered = filtered.OrderBy(c => c.Name);
        }
        else if (sortBy == "pack")
        {
            filtered = filtered.OrderBy(c => c.Pack).ThenBy(c => c.CardNumber);
        }
        else if (sortBy == "rarity")
        {
            filtered = filtered.OrderBy(c => GetRarityOrder(c.Rarity)).ThenBy(c => c.Name);
        }
        else // newest
        {
            filtered = filtered.OrderBy(c => c.CardNumber);
        }

        filteredCards = filtered.ToList();
        StateHasChanged();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedPack = "";
        selectedRarity = "";
        collectionFilter = "all";
        sortBy = "name";
        ApplyFilters();
    }

    private int GetRarityOrder(string rarity) => rarity switch
    {
        "Common" => 1,
        "Uncommon" => 2,
        "Rare" => 3,
        "Ultra Rare" => 4,
        _ => 5
    };
}
