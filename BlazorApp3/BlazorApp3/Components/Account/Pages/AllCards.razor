@page "/AllCards"
@using BlazorApp3.Data.Models
@using System.Security.Claims
@using BlazorApp3.Services
@inject IPokemonCollectionService CollectionSvc
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS
@rendermode InteractiveServer
@inherits ComponentBase

<PageTitle>All Pokémon Cards</PageTitle>

<div class="container-fluid mt-6">
    <div class="row mb-4 align-items-center">
        <div class="col-md-8">
            <h1 class="mb-0">Browse All Cards</h1>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-primary me-2"
                    @onclick="AddSelectedToCollection"
                    disabled="@(selectedCards.Count == 0)">
                Add Selected (@selectedCards.Count)
            </button>
            <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                Clear Filters
            </button>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <input type="text"
                   class="form-control"
                   placeholder="🔍 Search cards..."
                   @bind="searchTerm"
                   @oninput="OnSearchChanged" />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <select class="form-select" @bind="sortBy" @bind:after="ApplyFilters">
                <option value="number">Sort by Card Number</option>
                <option value="name">Sort by Name</option>
                <option value="pack">Sort by Pack</option>
                <option value="rarity">Sort by Rarity</option>
                <option value="type">Sort by Type</option>
                <option value="expansion">Sort by Expansion</option>
                <option value="newest">Sort by Newest</option>
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="selectedRarity" @bind:after="ApplyFilters">
                <option value="">All Rarities</option>
                @foreach (var rarity in availableRarities)
                {
                    <option value="@rarity">@rarity</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="SelectedType" @bind:after="ApplyFilters">
                <option value="">All Types</option>
                @foreach (var type in availableTypes)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <select class="form-select" @bind="selectedExpansion" @bind:after="ApplyFilters">
                <option value="">All Expansions</option>
                @foreach (var expansion in availableExpansions)
                {
                    <option value="@expansion">@expansion</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="selectedPack" @bind:after="ApplyFilters">
                <option value="">All Packs</option>
                @foreach (var pack in availablePacks)
                {
                    <option value="@pack">@pack</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="collectionFilter" @bind:after="ApplyFilters">
                <option value="all">All Cards</option>
                <option value="collected">Collected</option>
                <option value="missing">Missing</option>
            </select>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="px-3 py-2 rounded" style="background: #181b2a; color: #4dc2ff; font-weight: 500;">
                Collected:
                <span style="color: #fff">
                    @filteredOwnedCards / @filteredTotalCards (@(filteredTotalCards == 0 ? 0 : (int)Math.Round(100.0 * filteredOwnedCards / filteredTotalCards))%)
                </span>
            </div>
        </div>
        <div class="col-md-4">
            <div class="px-3 py-2 rounded" style="background: #ffe869; color: #181b2a; font-weight: 500;">
                Unique Cards Owned:
                <span style="color: #181b2a">@filteredOwnedCards</span>
            </div>
        </div>
        <div class="col-md-4">
            <div class="px-3 py-2 rounded" style="background: #6cff8f; color: #181b2a; font-weight: 500;">
                Total Cards Available:
                <span style="color: #181b2a">@filteredTotalCards</span>
            </div>
        </div>
    </div>

    <div class="row">
        @if (isLoading)
        {
            <div class="text-center">Loading cards...</div>
        }
        else if (!string.IsNullOrEmpty(error))
        {
            <div class="text-danger">@error</div>
        }
        else if (!filteredCards.Any())
        {
            <div class="text-muted">No cards match the current filters.</div>
        }
        else
        {
            @foreach (var card in filteredCards)
            {
                <div class="col-md-3 mb-2">
                    <div class="card position-relative">
                        <div class="form-check position-absolute m-2">
                            <input class="form-check-input"
                                   type="checkbox"
                                   id="chk_@card.CardId"
                                   @onchange="e => ToggleSelection(card.CardId, (bool?)e.Value)"
                                   checked="@selectedCards.Contains(card.CardId)" />
                        </div>
                        <img src="@card.ImageUrl" class="card-img-top" alt="@card.Name" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@card.Name #@card.CardNumber</h5>
                            <p class="card-text mb-1">Pack: @card.Pack</p>
                            <p class="card-text mb-1">Expansion: @card.Expansion</p>
                            <p class="card-text mb-1">Type: @card.Type</p>
                            <p class="card-text mb-1">
                                Rarity: <span class="@GetRarityClass(card.Rarity)">@card.Rarity</span>
                            </p>
                            <button class="btn btn-sm w-100 mt-auto @(card.IsCollected ? "btn-secondary" : "btn-primary")"
                                    @onclick="() => ToggleCard(card.CardId)">
                                @(card.IsCollected ? "Remove" : "Add")
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string? error;
    private List<ViewCard> viewCards = new();
    private List<ViewCard> filteredCards = new();
    private int filteredOwnedCards = 0;
    private int filteredTotalCards = 0;

    private string searchTerm = "";
    private string sortBy = "number";
    private string selectedPack = "";
    private string selectedRarity = "";
    private string SelectedType = "";
    private string selectedExpansion = "";
    private string collectionFilter = "all";

    private List<string> availablePacks = new();
    private List<string> availableRarities = new();
    private List<string> availableExpansions = new();
    private List<string> availableTypes = new();

    private HashSet<string> selectedCards = new();

    private int totalAvailableCards = 0;
    private int myCollectedCards = 0;

    private record ViewCard(
        string CardId,
        string Name,
        string Pack,
        string Rarity,
        string Expansion,
        string Type,
        string CardNumber,
        string ImageUrl,
        bool IsCollected
    );

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load()
    {
        isLoading = true;
        error = null;

        try
        {
            var all = await CollectionSvc.GetAllCardsAsync();
            totalAvailableCards = all.Select(c => c.Id).Distinct().Count();

            var auth = await AuthState.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var owned = uid is null
                ? new List<CardCollectionDto>()
                : await CollectionSvc.GetMyCollectionAsync(uid);
            var ownedIds = owned.Select(o => o.CardId).ToHashSet();
            myCollectedCards = ownedIds.Count;

            viewCards = all.Select(c => new ViewCard(
                c.Id,
                c.Name,
                c.Pack,
                c.Rarity,
                c.Expansion,
                c.Type,
                c.CardNumber,
                c.ImageUrl,
                ownedIds.Contains(c.Id)
            )).ToList();

            var PackOrder = new[]
            {
                "Charizard", "Mewtwo", "Pikachu", "Shared(Genetic Apex)", "Mythical Island",
                "Dialga", "Palkia", "Shared(Space-Time Smackdown)", "Triumphant Light",
                "Shining Revelry", "Solgaleo", "Lunala", "Shared(Celestial Guardians)",
                "Extradimensional Crisis", "Eevee Grove", "Promo Cards", "Campaign", "Wonder pick",
                "Missions", "Premium Missions", "Shop"
            };
            availablePacks = viewCards
                .Select(c => c.Pack)
                .Distinct()
                .OrderBy(p => Array.IndexOf(PackOrder, p) == -1 ? int.MaxValue : Array.IndexOf(PackOrder, p))
                .ToList();

            var ExpansionOrder = new[]
            {
                "Genetic Apex", "Mythical Island", "Space-Time Smackdown",
                "Triumphant Light", "Shining Revelry", "Celestial Guardians", "Extradimensional Crisis", "Eevee Grove"
            };
            availableExpansions = viewCards
                .Select(c => c.Expansion)
                .Distinct()
                .OrderBy(r => Array.IndexOf(ExpansionOrder, r) == -1 ? int.MaxValue : Array.IndexOf(ExpansionOrder, r))
                .ToList();

            var rarityOrder = new[]
            {
                "Common", "Uncommon", "Rare", "EX Cards", "Full Art",
                "Enhanced Full Art", "Immersive", "Gold", "Promo"
            };
            availableRarities = viewCards
                .Select(c => c.Rarity)
                .Distinct()
                .OrderBy(r => Array.IndexOf(rarityOrder, r) == -1 ? int.MaxValue : Array.IndexOf(rarityOrder, r))
                .ThenBy(r => r)
                .ToList();

            var TypeOrder = new[]
            {
                "Grass", "Fire", "Water", "Lightning",
                "Psychic", "Fighting", "Darkness", "Metal",
                "Dragon", "Colorless"
            };
            availableTypes = viewCards
                .Select(c => c.Type)
                .Distinct()
                .OrderBy(t => Array.IndexOf(TypeOrder, t) == -1 ? int.MaxValue : Array.IndexOf(TypeOrder, t))
                .ToList();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var rarityOrder = new[]
        {
            "Common", "Uncommon", "Rare", "EX Cards", "Full Art",
            "Enhanced Full Art", "Immersive", "Gold", "Promo"
        };
        var TypeOrder = new[]
        {
            "Grass", "Fire", "Water", "Lightning",
            "Psychic", "Fighting", "Darkness", "Metal",
            "Dragon", "Colorless"
        };

        var filtered = viewCards.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(c =>
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.CardNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            );
        }

        if (!string.IsNullOrEmpty(SelectedType))
            filtered = filtered.Where(c => c.Type.Equals(SelectedType, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrEmpty(selectedPack))
            filtered = filtered.Where(c => c.Pack == selectedPack);

        if (!string.IsNullOrEmpty(selectedRarity))
            filtered = filtered.Where(c => c.Rarity == selectedRarity);

        if (!string.IsNullOrEmpty(selectedExpansion))
            filtered = filtered.Where(c => c.Expansion == selectedExpansion);

        if (collectionFilter == "collected")
            filtered = filtered.Where(c => c.IsCollected);
        else if (collectionFilter == "missing")
            filtered = filtered.Where(c => !c.IsCollected);

        filtered = sortBy switch
        {
            "name" => filtered.OrderBy(c => c.Name),
            "pack" => filtered.OrderBy(c => c.Pack).ThenBy(c => c.CardNumber),
            "rarity" => filtered
                .OrderBy(c => Array.IndexOf(rarityOrder, c.Rarity) == -1
                    ? int.MaxValue
                    : Array.IndexOf(rarityOrder, c.Rarity))
                .ThenBy(c => c.Name),
            "type" => filtered
                .OrderBy(c => Array.IndexOf(TypeOrder, c.Type) == -1
                    ? int.MaxValue
                    : Array.IndexOf(TypeOrder, c.Type))
                .ThenBy(c => c.Name),
            "expansion" => filtered.OrderBy(c => c.Expansion).ThenBy(c => c.Pack).ThenBy(c => c.CardNumber),
            "number" => filtered.OrderBy(c =>
                int.TryParse(c.CardNumber, out var num) ? num : int.MaxValue),
            _ => filtered.OrderBy(c => c.CardNumber)
        };

        filteredCards = filtered.ToList();
        filteredTotalCards = filteredCards.Count;
        filteredOwnedCards = filteredCards.Count(c => c.IsCollected);
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedPack = selectedRarity = selectedExpansion = string.Empty;
        SelectedType = "";
        collectionFilter = "all";
        sortBy = "number";
        selectedCards.Clear();
        ApplyFilters();
    }

    private void ToggleSelection(string cardId, bool? isChecked)
    {
        if (isChecked == true)
            selectedCards.Add(cardId);
        else
            selectedCards.Remove(cardId);
    }

    private async Task AddSelectedToCollection()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (uid == null)
        {
            await JS.InvokeVoidAsync("alert", "Please log in to add cards.");
            return;
        }

        foreach (var cardId in selectedCards)
        {
            await CollectionSvc.AddCardAsync(uid, new AddCardRequest { CardId = cardId, Quantity = 1 });
        }

        selectedCards.Clear();
        await Load();
    }

    private async Task ToggleCard(string cardId)
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (uid == null)
        {
            await JS.InvokeVoidAsync("alert", "Please log in.");
            return;
        }

        var wasCollected = viewCards.First(c => c.CardId == cardId).IsCollected;
        if (wasCollected)
            await CollectionSvc.RemoveCardAsync(uid, cardId);
        else
            await CollectionSvc.AddCardAsync(uid, new AddCardRequest { CardId = cardId, Quantity = 1 });

        await Load();
    }

    private string GetRarityClass(string rarity)
    {
        return rarity switch
        {
            "Common" => "text-secondary",
            "Uncommon" => "text-success",
            "Rare" => "text-primary",
            "EX Cards" => "text-warning",
            "Full Art" => "text-info",
            "Enhanced Full Art" => "text-primary fw-bold",
            "Immersive" => "text-danger",
            "Gold" => "text-warning fw-bold",
            "Promo" => "text-muted",
            _ => "text-dark"
        };
    }
}
