@page "/AllCards"
@using BlazorApp3.Data.Models
@using System.Security.Claims
@using BlazorApp3.Services
@inject IPokemonCollectionService CollectionSvc
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS
@rendermode InteractiveServer
@inherits ComponentBase

<PageTitle>⚡ All Pokémon Cards</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">⚡ Browse All Cards</h1>

    <!-- Controls Row -->
    <div class="row mb-4">
        <div class="col-md-3">
            <input type="text" class="form-control" placeholder="🔍 Search cards..."
                   @bind="searchTerm" @oninput="OnSearchChanged" />
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="sortBy" @bind:after="ApplyFilters">
                <option value="name">Sort by Name</option>
                <option value="pack">Sort by Pack</option>
                <option value="rarity">Sort by Rarity</option>
                <option value="newest">Sort by Newest</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedExpansion" @bind:after="ApplyFilters">
                <option value="">All Expansions</option>
                @foreach (var expansion in availableExpansions)
                {
                    <option value="@expansion">@expansion</option>
                }
            </select>
        </div>
        <div class="col-md-3 d-flex gap-2">
            <button class="btn btn-primary w-100" @onclick="AddSelectedToCollection" disabled="@(!selectedCards.Any())">
                Add Selected (@selectedCards.Count)
            </button>
            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                Clear Filters
            </button>
        </div>
    </div>

    <!-- Filters Row -->
    <div class="row mb-4">
        <div class="col-md-4">
            <select class="form-select" @bind="selectedPack" @bind:after="ApplyFilters">
                <option value="">All Packs</option>
                @foreach (var pack in availablePacks)
                {
                    <option value="@pack">@pack</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="selectedRarity" @bind:after="ApplyFilters">
                <option value="">All Rarities</option>
                @foreach (var rarity in availableRarities)
                {
                    <option value="@rarity">@rarity</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-select" @bind="collectionFilter" @bind:after="ApplyFilters">
                <option value="all">All Cards</option>
                <option value="collected">Collected</option>
                <option value="missing">Missing</option>
            </select>
        </div>
    </div>

    <!-- Cards Display -->
    <div class="row">
        @if (isLoading)
        {
            <div class="text-center">Loading cards...</div>
        }
        else if (!string.IsNullOrEmpty(error))
        {
            <div class="text-danger">@error</div>
        }
        else if (!filteredCards.Any())
        {
            <div class="text-muted">No cards match the current filters.</div>
        }
        else
        {
            @foreach (var card in filteredCards)
            {
                <div class="col-md-4 mb-3">
                    <div class="card position-relative">
                        <div class="form-check position-absolute m-2">
                            <input class="form-check-input" type="checkbox" id="chk_@card.CardId"
                                   @onchange="e => ToggleSelection(card.CardId, (bool?)e.Value)"
                                   checked="@selectedCards.Contains(card.CardId)" />
                        </div>
                        <img src="@card.ImageUrl" class="card-img-top" alt="@card.Name" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@card.Name</h5>
                            <p class="card-text mb-1">Pack: @card.Pack</p>
                            <p class="card-text mb-1">Rarity: @card.Rarity</p>
                            <p class="card-text mb-3">Expansion: @card.Expansion</p>

                            <button class="btn btn-sm w-100 mt-auto @(card.IsCollected ? "btn-secondary" : "btn-primary")"
                                    @onclick="() => ToggleCard(card.CardId)">
                                @(card.IsCollected ? "Remove" : "Add")
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string? error;
    private List<ViewCard> viewCards = new();
    private List<ViewCard> filteredCards = new();

    private string searchTerm = "";
    private string sortBy = "name";
    private string selectedPack = "";
    private string selectedRarity = "";
    private string selectedExpansion = "";
    private string collectionFilter = "all";

    private List<string> availablePacks = new();
    private List<string> availableRarities = new();
    private List<string> availableExpansions = new();

    private HashSet<string> selectedCards = new();

    private record ViewCard(string CardId, string Name, string Pack, string Rarity, string Expansion, string CardNumber, string ImageUrl, bool IsCollected);

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load()
    {
        isLoading = true;
        error = null;
        try
        {
            var all = await CollectionSvc.GetAllCardsAsync();
            var auth = await AuthState.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            var owned = uid is null ? new List<CardCollectionDto>() : await CollectionSvc.GetMyCollectionAsync(uid);
            var ownedIds = owned.Select(o => o.CardId).ToHashSet();
            viewCards = all.Select(c => new ViewCard(c.Id, c.Name, c.Pack, c.Rarity, c.Expansion, c.CardNumber, c.ImageUrl, ownedIds.Contains(c.Id))).ToList();
            availablePacks = viewCards.Select(c => c.Pack).Distinct().OrderBy(p => p).ToList();
            availableRarities = viewCards.Select(c => c.Rarity).Distinct().OrderBy(r => r).ToList();
            availableExpansions = viewCards.Select(c => c.Expansion).Distinct().OrderBy(e => e).ToList();
            ApplyFilters();
        }
        catch (Exception ex) { error = ex.Message; }
        finally { isLoading = false; }
    }

    private void ApplyFilters()
    {
        var filtered = viewCards.AsEnumerable();
        if (!string.IsNullOrWhiteSpace(searchTerm))
            filtered = filtered.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || c.Pack.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || c.CardNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        if (!string.IsNullOrEmpty(selectedPack)) filtered = filtered.Where(c => c.Pack == selectedPack);
        if (!string.IsNullOrEmpty(selectedRarity)) filtered = filtered.Where(c => c.Rarity == selectedRarity);
        if (!string.IsNullOrEmpty(selectedExpansion)) filtered = filtered.Where(c => c.Expansion == selectedExpansion);
        if (collectionFilter == "collected") filtered = filtered.Where(c => c.IsCollected);
        else if (collectionFilter == "missing") filtered = filtered.Where(c => !c.IsCollected);
        filtered = sortBy switch { "name" => filtered.OrderBy(c => c.Name), "pack" => filtered.OrderBy(c => c.Pack).ThenBy(c => c.CardNumber), "rarity" => filtered.OrderBy(c => c.Rarity).ThenBy(c => c.Name), _ => filtered.OrderBy(c => c.CardNumber) };
        filteredCards = filtered.ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e) { searchTerm = e.Value?.ToString() ?? ""; ApplyFilters(); }
    private void ClearFilters() { searchTerm = ""; selectedPack = selectedRarity = selectedExpansion = string.Empty; collectionFilter = "all"; sortBy = "name"; selectedCards.Clear(); ApplyFilters(); }

    private void ToggleSelection(string cardId, bool? isChecked) { if (isChecked == true) selectedCards.Add(cardId); else selectedCards.Remove(cardId); }

    private async Task AddSelectedToCollection()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (uid == null) { await JS.InvokeVoidAsync("alert", "Please log in to add cards."); return; }
        foreach (var cardId in selectedCards) await CollectionSvc.AddCardAsync(uid, new AddCardRequest { CardId = cardId, Quantity = 1 });
        selectedCards.Clear(); await Load();
    }

    private async Task ToggleCard(string cardId)
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (uid == null) { await JS.InvokeVoidAsync("alert", "Please log in."); return; }
        var was = viewCards.First(c => c.CardId == cardId).IsCollected;
        if (was) await CollectionSvc.RemoveCardAsync(uid, cardId); else await CollectionSvc.AddCardAsync(uid, new AddCardRequest { CardId = cardId, Quantity = 1 });
        await Load();
    }
}
