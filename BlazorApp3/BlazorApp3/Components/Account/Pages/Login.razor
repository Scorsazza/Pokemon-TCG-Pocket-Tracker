@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp3.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container" style="min-height: 100vh; display: flex; align-items: center; justify-content: center; padding: 2rem 1rem; background: linear-gradient(135deg, #1a1b23 0%, #2d1b69 100%); color: #e2e8f0;">
    <div class="login-card" style="background: #2a2d3a; border-radius: 20px; box-shadow: 0 20px 50px rgba(139, 92, 246, 0.1); padding: 3rem; width: 100%; max-width: 450px; border: 1px solid rgba(139, 92, 246, 0.1);">
        <h1 style="color: #e2e8f0; font-weight: 700; font-size: 2rem; margin-bottom: 0.5rem; text-align: center;">Welcome Back</h1>
        <p style="color: #94a3b8; text-align: center; margin-bottom: 2rem;">Sign in to your account</p>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.2); color: #ef4444; border-radius: 12px; padding: 1rem; margin-bottom: 1.5rem;">
                @errorMessage
            </div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <ValidationSummary style="background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.2); color: #ef4444; border-radius: 12px; padding: 1rem; margin-bottom: 1.5rem; display: none;" role="alert" />

            <div style="position: relative; margin-bottom: 1.5rem;">
                <InputText @bind-Value="Input.Username"
                           id="Input.Username"
                           style="width: 100%; padding: 1rem; background: #374151; border: 2px solid #374151; border-radius: 12px; color: #e2e8f0; font-size: 1rem; outline: none;"
                           autocomplete="username"
                           aria-required="true"
                           placeholder="Username"
                           onfocus="this.style.borderColor='#8b5cf6'; this.style.boxShadow='0 0 0 3px rgba(139, 92, 246, 0.1)'"
                           onblur="this.style.borderColor='#374151'; this.style.boxShadow='none'" />
                <ValidationMessage For="() => Input.Username" style="color: #ef4444; font-size: 0.875rem; margin-top: 0.5rem; display: block;" />
            </div>

            <div style="position: relative; margin-bottom: 1.5rem;">
                <InputText type="password"
                           @bind-Value="Input.Password"
                           id="Input.Password"
                           style="width: 100%; padding: 1rem; background: #374151; border: 2px solid #374151; border-radius: 12px; color: #e2e8f0; font-size: 1rem; outline: none;"
                           autocomplete="current-password"
                           aria-required="true"
                           placeholder="Password"
                           onfocus="this.style.borderColor='#8b5cf6'; this.style.boxShadow='0 0 0 3px rgba(139, 92, 246, 0.1)'"
                           onblur="this.style.borderColor='#374151'; this.style.boxShadow='none'" />
                <ValidationMessage For="() => Input.Password" style="color: #ef4444; font-size: 0.875rem; margin-top: 0.5rem; display: block;" />
            </div>

            <div style="margin-bottom: 1.5rem;">
                <label style="display: flex; align-items: center; gap: 0.5rem; color: #e2e8f0; font-weight: 500; cursor: pointer;">
                    <InputCheckbox @bind-Value="Input.RememberMe"
                                   style="width: 18px; height: 18px; background: #374151; border: 2px solid #6b7280; border-radius: 4px; cursor: pointer;" />
                    Remember me
                </label>
            </div>

            <button type="submit"
                    style="background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); border: none; border-radius: 25px; color: white; font-weight: 600; font-size: 1.1rem; padding: 1rem 2rem; width: 100%; cursor: pointer; transition: all 0.3s ease; @(isLoading ? "opacity: 0.6; cursor: not-allowed;" : "")"
                    disabled="@isLoading"
                    onmouseover="if(!this.disabled) { this.style.transform='translateY(-2px)'; this.style.boxShadow='0 15px 35px rgba(139, 92, 246, 0.3)'; }"
                    onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='none';">
                @if (isLoading)
                {
                    <span>Signing In...</span>
                }
                else
                {
                    <span>Sign In</span>
                }
            </button>
        </EditForm>

        <div style="text-align: center; margin-top: 1.5rem; color: #94a3b8;">
            Don't have an account?
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
               style="color: #8b5cf6; text-decoration: none; font-weight: 500;"
               onmouseover="this.style.color='#7c3aed'; this.style.textDecoration='underline'"
               onmouseout="this.style.color='#8b5cf6'; this.style.textDecoration='none'">Create one here</a>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isLoading = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo(
                    "Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(50, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        [RegularExpression(@"^[a-zA-Z0-9_]+$", ErrorMessage = "Username can only contain letters, numbers, and underscores.")]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}