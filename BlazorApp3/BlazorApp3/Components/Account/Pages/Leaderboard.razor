@page "/leaderboard"
@using BlazorApp3.Data.Models
@using BlazorApp3.Services
@inject IPokemonCollectionService CollectionSvc

@rendermode InteractiveServer

<PageTitle>Collection Leaderboard</PageTitle>

<div class="container mt-4">
    <h1 class="text-center mb-2">🏅 Top Collectors</h1>

    <div class="d-flex justify-content-center align-items-center mb-3">
        <button class="btn btn-outline-light btn-sm me-2" @onclick="PrevExpansion">◀</button>
        <span class="fw-bold">@CurrentExpansionDisplay</span>
        <button class="btn btn-outline-light btn-sm ms-2" @onclick="NextExpansion">▶</button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading leaderboard...</span>
            </div>
            <p class="mt-3 text-muted">Fetching top collectors...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger text-center">
            <p>@error</p>
            <button class="btn btn-secondary mt-2" @onclick="LoadLeaderboard">Retry</button>
        </div>
    }
    else if (!leaderboard.Any())
    {
        <div class="text-center py-5">
            <h4 class="text-muted">No leaderboard data yet.</h4>
            <p class="text-muted">Start collecting cards to appear on the leaderboard!</p>
        </div>
    }
    else
    {
        <div class="card shadow-lg border-0 bg-dark text-white">
            <div class="card-body p-4">
                <div class="table-responsive">
                    <table class="table table-dark table-hover align-middle mb-0 rounded overflow-hidden">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Trainer</th>
                                <th scope="col" class="text-end">Completion %</th>
                                <th scope="col" class="text-end">Unique</th>
                                <th scope="col" class="text-end">Total</th>
                                <th scope="col" class="text-end">Bounties</th>
                                <th scope="col" class="text-end">Trades</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (entry, index) in leaderboard.Select((e, i) => (e, i + 1)))
                            {
                                var rankIcon = index switch
                                {
                                    1 => "🥇",
                                    2 => "🥈",
                                    3 => "🥉",
                                    _ => $"{index}"
                                };
                                <tr>
                                    <td><strong>@rankIcon</strong></td>
                                    <td>@entry.UserName</td>
                                    <td class="text-end">@entry.CompletionPercentage%</td>
                                    <td class="text-end">@entry.UniqueCards</td>
                                    <td class="text-end">@entry.TotalCards</td>
                                    <td class="text-end">@entry.BountiesCompleted</td>
                                    <td class="text-end">@entry.TradesCompleted</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="text-end mt-3">
                    <small class="text-light-emphasis">
                        📅 Last updated: @TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("GMT Standard Time")).ToShortTimeString()
                    </small>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private string? error;
    private List<LeaderboardEntry> leaderboard = new();

    private List<string> expansions = new();
    private int expansionIndex = 0;

    private string CurrentExpansionDisplay =>
        expansions.Count == 0 ? "Loading expansions…" : expansions[expansionIndex];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var fetched = await CollectionSvc.GetAllExpansionsAsync();
            expansions = new List<string> { "All" };
            expansions.AddRange(fetched);
        }
        catch
        {
            expansions = new List<string> { "All" };
        }
        await LoadLeaderboard();
    }

    private async Task LoadLeaderboard()
    {
        isLoading = true;
        error = null;
        try
        {
            string? filter = expansions[expansionIndex] == "All"
                ? null
                : expansions[expansionIndex];
            leaderboard = await CollectionSvc.GetLeaderboardAsync(10, filter);
        }
        catch (Exception ex)
        {
            error = $"Failed to load leaderboard: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PrevExpansion()
    {
        if (expansions.Count == 0) return;
        expansionIndex = (expansionIndex == 0)
            ? expansions.Count - 1
            : expansionIndex - 1;
        await LoadLeaderboard();
    }

    private async Task NextExpansion()
    {
        if (expansions.Count == 0) return;
        expansionIndex = (expansionIndex == expansions.Count - 1)
            ? 0
            : expansionIndex + 1;
        await LoadLeaderboard();
    }
}
