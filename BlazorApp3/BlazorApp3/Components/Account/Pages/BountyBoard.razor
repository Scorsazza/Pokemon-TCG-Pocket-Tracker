@page "/bountyboard"
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorApp3.Data.Models
@using BlazorApp3.Data
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Bounty Board</PageTitle>

<div class="container py-4">
    <h1 class="mb-4">Bounty Board</h1>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-secondary" role="status"></div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Left column: Create New Bounty -->
            <div class="col-md-4">
                <section class="create-bounty mb-4 p-3">
                    <h5>Create New Bounty</h5>

                    <!-- Friend Code for bounty owner -->
                    <input placeholder="Your Friend Code"
                           class="form-control mb-2"
                           @bind="friendCode" />

                    <!-- Search cards for bounty -->
                    <input placeholder="Search cards..."
                           class="form-control mb-2"
                           @bind="searchTerm"
                           @oninput="FilterCards" />

                    @if (filteredCards.Any())
                    {
                        <div class="d-flex overflow-auto mb-2">
                            @foreach (var card in filteredCards)
                            {
                                <div class="me-2 card-item @(selectedCardId == card.Id ? "border-primary" : "border") rounded p-1"
                                     @onclick="() => SelectCard(card.Id)"
                                     style="cursor:pointer; min-width:80px;">
                                    <img src="@card.ImageUrl"
                                         alt="@card.Name"
                                         class="img-fluid"
                                         style="height:120px; object-fit:contain;" />
                                    <small class="d-block text-center mt-1">@card.Name</small>
                                </div>
                            }
                        </div>
                    }

                    <textarea class="form-control mb-2"
                              placeholder="Description"
                              @bind="description"
                              rows="2"></textarea>

                    <button class="btn btn-primary w-100"
                            @onclick="OnSubmit"
                            disabled="@(string.IsNullOrEmpty(selectedCardId) || string.IsNullOrEmpty(description) || string.IsNullOrEmpty(friendCode))">
                        Submit Bounty
                    </button>
                </section>
            </div>

            <!-- Right column: Active Bounties List -->
            <div class="col-md-8">
                <section class="bounty-list">
                    <h5>Active Bounties</h5>
                    @if (!bounties.Any())
                    {
                        <div class="alert alert-info">No bounties posted yet.</div>
                    }
                    else
                    {
                        <ul class="list-group">
                            @foreach (var b in bounties)
                            {
                                <li class="list-group-item mb-3">
                                    <div class="d-flex align-items-start">
                                        <img src="@b.CardImageUrl"
                                             alt="@b.CardName"
                                             class="me-3"
                                             style="width:100px; height:150px; object-fit:cover;" />
                                        <div class="flex-grow-1">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <div>
                                                    <h6 class="mb-1">
                                                        @b.CardName
                                                        <small class="text-muted">(@b.CardId)</small>
                                                    </h6>
                                                    <p class="mb-1">@b.Description</p>
                                                    <p class="mb-1">
                                                        <strong>Friend Code:</strong>
                                                        @b.OfferedItem
                                                    </p>
                                                    <p class="mb-1">
                                                        <small class="text-muted">
                                                            Expansion: @b.Expansion | Rarity: @b.Rarity
                                                        </small>
                                                    </p>
                                                    <p class="mb-1">
                                                        <small class="text-muted">
                                                            Posted by <strong>@b.UserName</strong>
                                                            on @b.CreatedAt.ToLocalTime().ToString("g")
                                                        </small>
                                                    </p>
                                                </div>
                                                @if (b.UserId == currentUserId)
                                                {
                                                    <button class="btn btn-danger btn-sm"
                                                            @onclick="() => DeleteBounty(b.Id)"
                                                            title="Delete your bounty">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </div>

                                            <!-- Show existing offers for this bounty -->
                                            @if (b.Offers.Any())
                                            {
                                                <div class="mt-3 mb-3">
                                                    <h6 class="text-muted">Offers (@b.Offers.Count):</h6>
                                                    <div class="row">
                                                        @foreach (var offer in b.Offers)
                                                        {
                                                            <div class="col-md-6 mb-2">
                                                                <div class="card border-secondary">
                                                                    <div class="card-body p-2">
                                                                        <div class="d-flex align-items-center">
                                                                            <img src="@offer.CardImageUrl"
                                                                                 alt="@offer.CardName"
                                                                                 class="me-2"
                                                                                 style="width:40px; height:60px; object-fit:cover;" />
                                                                            <div class="flex-grow-1">
                                                                                <small class="fw-bold">
                                                                                    @offer.CardName
                                                                                </small><br />
                                                                                <small class="text-muted">
                                                                                    by @offer.OffererName
                                                                                </small><br />
                                                                                <small class="text-muted">
                                                                                    @offer.CreatedAt.ToLocalTime().ToString("g")
                                                                                </small><br />
                                                                                <small class="text-muted">
                                                                                    Friend Code: <strong>@offer.OffererFriendCode</strong>
                                                                                </small>
                                                                            </div>

                                                                            @if (b.UserId == currentUserId && offer.Status == OfferStatus.Pending)
                                                                            {
                                                                                <div class="btn-group-vertical btn-group-sm">
                                                                                    <button class="btn btn-success btn-sm"
                                                                                            @onclick="() => AcceptOffer(offer.Id)"
                                                                                            title="Accept offer">
                                                                                        ✓
                                                                                    </button>
                                                                                    <button class="btn btn-danger btn-sm"
                                                                                            @onclick="() => RejectOffer(offer.Id)"
                                                                                            title="Reject offer">
                                                                                        ✗
                                                                                    </button>
                                                                                </div>
                                                                            }
                                                                            else if (offer.Status != OfferStatus.Pending)
                                                                            {
                                                                                <span class="badge @(offer.Status == OfferStatus.Accepted ? "bg-success" : "bg-danger")">
                                                                                    @offer.Status
                                                                                </span>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }

                                            <!-- Offer interface (only if not the bounty owner and bounty is active) -->
                                            @if (b.UserId != currentUserId && b.Status == BountyStatus.Active)
                                            {
                                                @if (offerForBountyId == b.Id)
                                                {
                                                    <div class="mt-2">
                                                        <!-- Select card dropdown -->
                                                        <select class="form-select form-select-sm mb-2"
                                                                @bind="selectedOfferCardId">
                                                            <option value="">-- Select your card --</option>
                                                            @foreach (var uc in userCards)
                                                            {
                                                                <option value="@uc.CardId">
                                                                    @uc.Card.Name (@uc.Quantity available)
                                                                </option>
                                                            }
                                                        </select>

                                                        <!-- NEW: Friend Code input for offerer -->
                                                        <input placeholder="Your Friend Code"
                                                               class="form-control form-control-sm mb-2"
                                                               @bind="offerFriendCode" />

                                                        <button class="btn btn-success btn-sm me-2"
                                                                @onclick="SubmitOffer"
                                                                disabled="@(
                                                                string.IsNullOrEmpty(selectedOfferCardId) ||
                                                                string.IsNullOrEmpty(offerFriendCode)
                                                                                                                        )">
                                                        Send Offer
                                                    </button>
                                                    <button class="btn btn-secondary btn-sm" @onclick="CancelOffer">
                                                        Cancel
                                                    </button>
                                                </div>
                                                                }
                                                else
                                                {
                                                    <button class="btn btn-outline-success btn-sm mt-2"
                                                            @onclick="() => StartOffer(b.Id)">
                                                        Offer Card
                                                    </button>
                                                }
                                            }
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                </section>
            </div>
        </div>
    }
</div>

@code {
    bool isLoading = true;
    string searchTerm = string.Empty;
    string selectedCardId = string.Empty;
    string description = string.Empty;
    string friendCode = string.Empty;          // bounty owner's friend code

    string offerFriendCode = string.Empty;     // ← NEW: friend code entered when making an offer

    string? currentUserId = null;

    List<PokemonCard> allCards = new();
    List<PokemonCard> filteredCards = new();
    List<BountyRequestDtoExtended> bounties = new();

    List<UserCard> userCards = new();
    int? offerForBountyId = null;
    string selectedOfferCardId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    async Task LoadData()
    {
        allCards = await Db.PokemonCards.ToListAsync();
        filteredCards.Clear();

        var auth = await AuthState.GetAuthenticationStateAsync();
        currentUserId = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(currentUserId))
        {
            userCards = await Db.UserCards
                .Include(uc => uc.Card)
                .Where(uc => uc.UserId == currentUserId && uc.Quantity > 0)
                .ToListAsync();
        }

        bounties = await Db.BountyRequests
            .Include(br => br.Card)
            .Include(br => br.User)
            .Include(br => br.Offers)
                .ThenInclude(o => o.Card)
            .Include(br => br.Offers)
                .ThenInclude(o => o.Offerer)
            .Where(br => br.Status == BountyStatus.Active)
            .OrderByDescending(br => br.CreatedAt)
            .Select(br => new BountyRequestDtoExtended
            {
                Id = br.Id,
                UserId = br.UserId,
                UserName = br.User.UserName ?? "Unknown",
                CardId = br.CardId,
                CardName = br.Card.Name,
                CardImageUrl = br.Card.ImageUrl,
                Expansion = br.Card.Expansion,
                Rarity = br.Card.Rarity,
                Description = br.Description,
                OfferedItem = br.OfferedItem,
                Status = br.Status,
                CreatedAt = br.CreatedAt,
                Offers = br.Offers.Select(o => new BountyOfferDto
                {
                    Id = o.Id,
                    OffererId = o.OffererId,
                    OffererName = o.Offerer.UserName ?? "Unknown",
                    OffererFriendCode = o.FriendCode,            // ← show friend code here
                    CardId = o.CardId,
                    CardName = o.Card.Name,
                    CardImageUrl = o.Card.ImageUrl,
                    Status = o.Status,
                    CreatedAt = o.CreatedAt
                }).ToList()
            })
            .ToListAsync();
    }

    void FilterCards(ChangeEventArgs e)
    {
        var allowedRarities = new HashSet<string> { "Common", "Uncommon", "Rare", "EX Cards", "Full Art" };
        searchTerm = e.Value?.ToString() ?? string.Empty;
        filteredCards = string.IsNullOrWhiteSpace(searchTerm)
            ? new List<PokemonCard>()
            : allCards
                .Where(c =>
                    c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                    && allowedRarities.Contains(c.Rarity))
                .ToList();
    }

    void SelectCard(string id) => selectedCardId = id;

    async Task OnSubmit()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var user = auth.User;
        if (!user.Identity.IsAuthenticated)
        {
            await JS.InvokeVoidAsync("alert", "Please log in to post a bounty.");
            return;
        }

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value!;

        // Check if user already has an active bounty for this card
        var existingBounty = await Db.BountyRequests
            .FirstOrDefaultAsync(br =>
                br.UserId == userId &&
                br.CardId == selectedCardId &&
                br.Status == BountyStatus.Active
            );

        if (existingBounty != null)
        {
            await JS.InvokeVoidAsync("alert", "You already have an active bounty for this card.");
            return;
        }

        var bounty = new BountyRequest
        {
            UserId = userId,
            CardId = selectedCardId,
            Description = description,
            OfferedItem = friendCode, // bounty owner’s friend code
            Status = BountyStatus.Active,
            CreatedAt = DateTime.UtcNow
        };

        Db.BountyRequests.Add(bounty);
        await Db.SaveChangesAsync();
        await Db.UpdateUserStatsAsync(userId);

        // Reset form
        selectedCardId = description = friendCode = string.Empty;
        filteredCards.Clear();
        isLoading = true;
        await LoadData();
        isLoading = false;
    }

    void StartOffer(int bountyId)
    {
        offerForBountyId = bountyId;
        selectedOfferCardId = string.Empty;
        offerFriendCode = string.Empty; // reset the friend-code input
    }

    async Task SubmitOffer()
    {
        if (offerForBountyId == null ||
            string.IsNullOrEmpty(selectedOfferCardId) ||
            string.IsNullOrEmpty(offerFriendCode))
        {
            return;
        }

        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(uid))
        {
            await JS.InvokeVoidAsync("alert", "Please log in to offer.");
            return;
        }

        // Check if user has this card in their collection
        var userCard = await Db.UserCards
            .FirstOrDefaultAsync(uc =>
                uc.UserId == uid &&
                uc.CardId == selectedOfferCardId &&
                uc.Quantity > 0
            );

        if (userCard == null)
        {
            await JS.InvokeVoidAsync("alert", "You don't have this card in your collection.");
            return;
        }

        // Check if user already made an offer for this bounty
        var existingOffer = await Db.BountyOffers
            .FirstOrDefaultAsync(bo =>
                bo.BountyRequestId == offerForBountyId.Value &&
                bo.OffererId == uid
            );

        if (existingOffer != null)
        {
            await JS.InvokeVoidAsync("alert", "You have already made an offer for this bounty.");
            return;
        }

        var offer = new BountyOffer
        {
            BountyRequestId = offerForBountyId.Value,
            OffererId = uid,
            CardId = selectedOfferCardId,
            CreatedAt = DateTime.UtcNow,
            Status = OfferStatus.Pending,
            FriendCode = offerFriendCode.Trim()   // ← store the offerer’s friend code
        };

        Db.BountyOffers.Add(offer);
        await Db.SaveChangesAsync();

        // Clear the “Offer” UI and reload
        offerForBountyId = null;
        selectedOfferCardId = string.Empty;
        offerFriendCode = string.Empty;

        await LoadData();
        StateHasChanged();
    }

    void CancelOffer()
    {
        offerForBountyId = null;
        selectedOfferCardId = string.Empty;
        offerFriendCode = string.Empty;
    }

    async Task DeleteBounty(int bountyId)
    {
        var confirmDelete = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this bounty?");
        if (!confirmDelete) return;

        var bounty = await Db.BountyRequests
            .Include(br => br.Offers)
            .FirstOrDefaultAsync(br => br.Id == bountyId && br.UserId == currentUserId);

        if (bounty == null)
        {
            await JS.InvokeVoidAsync("alert", "Bounty not found or you don't have permission to delete it.");
            return;
        }

        // Delete associated offers first
        Db.BountyOffers.RemoveRange(bounty.Offers);
        Db.BountyRequests.Remove(bounty);

        await Db.SaveChangesAsync();
        await LoadData();
        StateHasChanged();
    }

    async Task AcceptOffer(int offerId)
    {
        var offer = await Db.BountyOffers
            .Include(o => o.BountyRequest)
            .FirstOrDefaultAsync(o => o.Id == offerId);

        if (offer == null || offer.BountyRequest.UserId != currentUserId)
        {
            await JS.InvokeVoidAsync("alert", "Offer not found or you don't have permission to accept it.");
            return;
        }

        offer.Status = OfferStatus.Accepted;
        offer.BountyRequest.Status = BountyStatus.Completed;

        // Reject all other pending offers for this bounty
        var otherOffers = await Db.BountyOffers
            .Where(o =>
                o.BountyRequestId == offer.BountyRequestId &&
                o.Id != offerId &&
                o.Status == OfferStatus.Pending)
            .ToListAsync();

        foreach (var otherOffer in otherOffers)
        {
            otherOffer.Status = OfferStatus.Rejected;
        }

        await Db.SaveChangesAsync();
        await LoadData();
        StateHasChanged();
    }

    async Task RejectOffer(int offerId)
    {
        var offer = await Db.BountyOffers
            .Include(o => o.BountyRequest)
            .FirstOrDefaultAsync(o => o.Id == offerId);

        if (offer == null || offer.BountyRequest.UserId != currentUserId)
        {
            await JS.InvokeVoidAsync("alert", "Offer not found or you don't have permission to reject it.");
            return;
        }

        offer.Status = OfferStatus.Rejected;
        await Db.SaveChangesAsync();
        await LoadData();
        StateHasChanged();
    }

    // DTO used to render each bounty + its offers
    private class BountyRequestDtoExtended
    {
        public int Id { get; set; }
        public string UserId { get; set; } = "";
        public string UserName { get; set; } = "";
        public string CardId { get; set; } = "";
        public string CardName { get; set; } = "";
        public string CardImageUrl { get; set; } = "";
        public string Expansion { get; set; } = "";
        public string Rarity { get; set; } = "";
        public string Description { get; set; } = "";
        public string OfferedItem { get; set; } = "";
        public BountyStatus Status { get; set; }
        public DateTime CreatedAt { get; set; }
        public List<BountyOfferDto> Offers { get; set; } = new();
    }

    // DTO for each offer
    private class BountyOfferDto
    {
        public int Id { get; set; }
        public string OffererId { get; set; } = "";
        public string OffererName { get; set; } = "";
        public string OffererFriendCode { get; set; } = "";  
        public string CardId { get; set; } = "";
        public string CardName { get; set; } = "";
        public string CardImageUrl { get; set; } = "";
        public OfferStatus Status { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

<style>
    .card-item.border,
    .card-item.border-primary {
        border: 1px solid #dee2e6;
    }

    .card-item.border-primary {
        border-color: #0d6efd !important;
    }
</style>
