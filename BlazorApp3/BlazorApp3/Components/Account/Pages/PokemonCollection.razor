@page "/pokemon-collection"
@using System.Security.Claims
@using BlazorApp3.Data.Models
@using BlazorApp3.Services
@inject AuthenticationStateProvider AuthState
@inject IPokemonCollectionService CollectionSvc
@inject IJSRuntime JS
@rendermode InteractiveServer
@inherits ComponentBase

<PageTitle>Pokémon TCG Pocket Collection Tracker</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">🏆 My Pokémon Collection</h1>

    <AuthorizeView>
        <Authorized>
            <!-- Controls Row -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <button class="btn btn-primary w-100" @onclick="Sync" disabled="@isSyncing">
                        @(isSyncing ? "🔄 Syncing..." : "🔄 Sync Cards")
                    </button>
                </div>
                <div class="col-md-4">
                    <input type="text" class="form-control" placeholder="🔍 Search cards..."
                           @bind="searchTerm" @oninput="OnSearchChanged" />
                </div>
                <div class="col-md-4">
                    <select class="form-select" @bind="sortBy" @bind:after="ApplyFilters">
                        <option value="name">Sort by Name</option>
                        <option value="pack">Sort by Pack</option>
                        <option value="rarity">Sort by Rarity</option>
                        <option value="quantity">Sort by Quantity</option>
                        <option value="newest">Sort by Newest</option>
                    </select>
                </div>
            </div>

            <!-- Filters Row -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedPack" @bind:after="ApplyFilters">
                        <option value="">All Packs</option>
                        @foreach (var pack in availablePacks)
                        {
                            <option value="@pack">@pack</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedRarity" @bind:after="ApplyFilters">
                        <option value="">All Rarities</option>
                        @foreach (var rarity in availableRarities)
                        {
                            <option value="@rarity">@rarity</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="selectedExpansion" @bind:after="ApplyFilters">
                        <option value="">All Expansions</option>
                        @foreach (var expansion in availableExpansions)
                        {
                            <option value="@expansion">@expansion</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @bind="tradeFilter" @bind:after="ApplyFilters">
                        <option value="all">All Cards</option>
                        <option value="trade">For Trade</option>
                        <option value="keep">Keeping</option>
                    </select>
                </div>
            </div>

            <!-- Collection Display -->
            <div class="row">
                @if (isLoading)
                {
                    <div class="text-center">Loading collection...</div>
                }
                else if (!string.IsNullOrEmpty(error))
                {
                    <div class="text-danger">@error</div>
                }
                else if (!filteredCards.Any())
                {
                    <div class="text-muted">No cards match the current filters.</div>
                }
                else
                {
                    @foreach (var card in filteredCards)
                    {
                        <div class="col-md-4 mb-3">
                            <div class="card">
                                <img src="@card.ImageUrl" class="card-img-top" alt="@card.Name" />
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">@card.Name</h5>
                                    <p class="card-text mb-1">Pack: @card.Pack</p>
                                    <p class="card-text mb-1">Rarity: @card.Rarity</p>
                                    <p class="card-text mb-1">Expansion: @card.Expansion</p>

                                    <div class="input-group input-group-sm mb-2">
                                        <button class="btn btn-outline-secondary"
                                                @onclick="() => AdjustQuantity(card, -1)"
                                                disabled="@(card.Quantity <= 0)">
                                            −
                                        </button>

                                        <input type="number"
                                               class="form-control text-center"
                                               value="@card.Quantity"
                                               min="0"
                                               @onchange="(e) => QuantityChanged(card, e)" />

                                        <button class="btn btn-outline-secondary"
                                                @onclick="() => AdjustQuantity(card, +1)">
                                            +
                                        </button>
                                    </div>

                                    @if (card.IsForTrade)
                                    {
                                        <span class="badge bg-warning text-dark mt-auto">For Trade</span>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-warning">
                You must <a href="Identity/Account/Login" class="alert-link">log in</a> to view and manage your collection.
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private bool isLoading = true;
    private bool isSyncing = false;
    private string? error;
    private List<ViewCard> viewCards = new();
    private List<ViewCard> filteredCards = new();

    private string searchTerm = "";
    private string sortBy = "name";
    private string selectedPack = "";
    private string selectedRarity = "";
    private string selectedExpansion = "";
    private string tradeFilter = "all";

    private List<string> availablePacks = new();
    private List<string> availableRarities = new();
    private List<string> availableExpansions = new();

    public record ViewCard(
        string CardId,
        string Name,
        string Pack,
        string Rarity,
        string Expansion,
        string CardNumber,
        string ImageUrl,
        bool IsCollected,
        int Quantity,
        bool IsForTrade
    );

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        if (auth.User.Identity?.IsAuthenticated == true)
        {
            await Load();
        }
    }

    private async Task Load()
    {
        isLoading = true;
        error = null;

        try
        {
            var auth = await AuthState.GetAuthenticationStateAsync();
            var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

            var owned = await CollectionSvc.GetMyCollectionAsync(uid, isCollected: true);
            viewCards = owned.Select(o => new ViewCard(
                o.CardId,
                o.Name,
                o.Pack,
                o.Rarity,
                o.Expansion,
                o.CardNumber,
                o.ImageUrl,
                true,
                o.Quantity,
                o.IsForTrade
            )).ToList();

            availablePacks = viewCards.Select(c => c.Pack).Distinct().OrderBy(p => p).ToList();
            availableRarities = viewCards.Select(c => c.Rarity).Distinct().OrderBy(r => r).ToList();
            availableExpansions = viewCards.Select(c => c.Expansion).Distinct().OrderBy(e => e).ToList();

            ApplyFilters();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var filtered = viewCards.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
            filtered = filtered.Where(c =>
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Pack.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.CardNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrEmpty(selectedPack))
            filtered = filtered.Where(c => c.Pack == selectedPack);

        if (!string.IsNullOrEmpty(selectedRarity))
            filtered = filtered.Where(c => c.Rarity == selectedRarity);

        if (!string.IsNullOrEmpty(selectedExpansion))
            filtered = filtered.Where(c => c.Expansion == selectedExpansion);

        if (tradeFilter == "trade")
            filtered = filtered.Where(c => c.IsForTrade);
        else if (tradeFilter == "keep")
            filtered = filtered.Where(c => !c.IsForTrade);

        filtered = sortBy switch
        {
            "name" => filtered.OrderBy(c => c.Name),
            "pack" => filtered.OrderBy(c => c.Pack).ThenBy(c => c.CardNumber),
            "rarity" => filtered.OrderBy(c => c.Rarity).ThenBy(c => c.Name),
            "quantity" => filtered.OrderByDescending(c => c.Quantity).ThenBy(c => c.Name),
            _ => filtered.OrderBy(c => c.CardNumber)
        };

        filteredCards = filtered.ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = "";
        selectedPack = "";
        selectedRarity = "";
        selectedExpansion = "";
        tradeFilter = "all";
        sortBy = "name";
        ApplyFilters();
    }

    private async Task Sync()
    {
        isSyncing = true;
        try
        {
            await CollectionSvc.SyncCardsFromApiAsync();
            await Load();
            await JS.InvokeVoidAsync("alert", "Cards synchronized successfully!");
        }
        finally
        {
            isSyncing = false;
        }
    }

    private async Task AdjustQuantity(ViewCard card, int delta)
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (uid == null) return;

        var newQty = Math.Max(0, card.Quantity + delta);
        await CollectionSvc.SetQuantityAsync(uid, card.CardId, newQty);
        await Load();
    }

    private async Task QuantityChanged(ViewCard card, ChangeEventArgs e)
    {
        var auth = await AuthState.GetAuthenticationStateAsync();
        var uid = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (uid == null) return;

        if (int.TryParse(e.Value?.ToString(), out var newQty))
        {
            newQty = Math.Max(0, newQty);
            await CollectionSvc.SetQuantityAsync(uid, card.CardId, newQty);
            await Load();
        }
    }
}
